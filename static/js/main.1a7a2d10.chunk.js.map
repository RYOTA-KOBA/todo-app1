{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["TodoForm","props","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","className","onSubmit","preventDefault","id","Math","floor","random","text","type","placeholder","name","onChange","ref","Todo","todos","completeTodo","removeTodo","updateTodo","setEdit","map","todo","index","isComplete","key","onClick","TodoList","setTodos","test","newTodos","updatedTodos","removeArr","filter","todoId","newValue","prev","item","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOA8DeA,MA5Df,SAAkBC,GAAQ,IAAD,EACKC,mBAASD,EAAME,KAAOF,EAAME,KAAKC,MAAQ,IAD9C,mBACdC,EADc,KACPC,EADO,KAGfC,EAAWC,iBAAO,MAExBC,qBAAU,WACNF,EAASG,QAAQC,WAGrB,IAAMC,EAAe,SAAAC,GACjBP,EAASO,EAAEC,OAAOV,QActB,OACI,0BAAMW,UAAU,YAAYC,SAZX,SAAAH,GACjBA,EAAEI,iBAEFhB,EAAMe,SAAS,CACXE,GAAIC,KAAKC,MAAoB,IAAdD,KAAKE,UACpBC,KAAMjB,IAGVC,EAAS,MAKJL,EAAME,KACH,oCACA,2BACIoB,KAAK,OACLC,YAAY,mBACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,kBACVW,SAAUd,EACVe,IAAKpB,IAET,4BAAQQ,UAAU,oBAAlB,6BAGA,oCACI,2BACAQ,KAAK,OACLC,YAAY,YACZpB,MAAOC,EACPoB,KAAK,OACLV,UAAU,aACVW,SAAUd,EACVe,IAAKpB,IAET,4BAAQQ,UAAU,eAAlB,2C,6BCPDa,MAxCf,YAA8D,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAAa,EACjC9B,mBAAS,CAC7BgB,GAAI,KACJd,MAAO,KAH8C,mBAClDD,EADkD,KAC5C8B,EAD4C,KAczD,OAAG9B,EAAKe,GACG,kBAAC,EAAD,CAAUf,KAAMA,EAAMa,SATZ,SAAAZ,GACjB4B,EAAW7B,EAAKe,GAAId,GACpB6B,EAAQ,CACJf,GAAI,KACJd,MAAO,QAQRyB,EAAMK,KAAI,SAACC,EAAMC,GAAP,OACb,yBACIrB,UAAWoB,EAAKE,WAAa,oBAAsB,WACnDC,IAAKF,GAEL,yBAAKE,IAAKH,EAAKjB,GAAIqB,QAAS,kBAAMT,EAAaK,EAAKjB,MAC/CiB,EAAKb,MAEV,yBAAKP,UAAU,SACX,kBAAC,IAAD,CACCwB,QAAS,kBAAMR,EAAWI,EAAKjB,KAC/BH,UAAU,gBAEX,kBAAC,IAAD,CACIwB,QAAS,kBAAMN,EAAQ,CAAEf,GAAIiB,EAAKjB,GAAId,MAAO+B,EAAKb,QAClDP,UAAU,oBCiBfyB,MAnDf,WAAqB,IAAD,EACUtC,mBAAS,IADnB,mBACT2B,EADS,KACFY,EADE,KAqChB,OACI,6BACI,gFACA,kBAAC,EAAD,CAAUzB,SArCF,SAAAmB,GACZ,GAAKA,EAAKb,OAAQ,QAAQoB,KAAKP,EAAKb,MAApC,CAIA,IAAMqB,EAAQ,CAAIR,GAAJ,mBAAaN,IAE3BY,EAASE,OA+BL,kBAAC,EAAD,CACId,MAAOA,EACPC,aAhBS,SAAAZ,GACjB,IAAI0B,EAAef,EAAMK,KAAI,SAAAC,GAIzB,OAHIA,EAAKjB,KAAOA,IACZiB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXM,EAASG,IAUDb,WAvBO,SAAAb,GACf,IAAM2B,EAAY,YAAIhB,GAAOiB,QAAO,SAAAX,GAAI,OAAIA,EAAKjB,KAAOA,KAExDuB,EAASI,IAqBDb,WAhCO,SAACe,EAAQC,GACnBA,EAAS1B,OAAQ,QAAQoB,KAAKM,EAAS1B,OAI5CmB,GAAS,SAAAQ,GAAI,OAAIA,EAAKf,KAAI,SAAAgB,GAAI,OAAKA,EAAKhC,KAAO6B,EAASC,EAAWE,aCT5DC,MARf,WACE,OACE,yBAAKpC,UAAU,YACb,kBAAC,EAAD,QCJNqC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.1a7a2d10.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\n\nfunction TodoForm(props) {\n    const [input, setInput] = useState(props.edit ? props.edit.value : '');\n\n    const inputRef = useRef(null);\n\n    useEffect(() => {\n        inputRef.current.focus()\n    })\n\n    const handleChange = e => {\n        setInput(e.target.value);\n    };\n\n    const handleSubmit = e => {\n        e.preventDefault();\n\n        props.onSubmit({\n            id: Math.floor(Math.random()*10000), \n            text: input\n        });\n        　\n        setInput('')\n    };\n\n    return (\n        <form className=\"todo-form\" onSubmit={handleSubmit}>\n            {props.edit ? (\n                <>\n                <input \n                    type=\"text\" \n                    placeholder=\"Update your item\" \n                    value={input} \n                    name=\"text\" \n                    className=\"todo-input edit\"\n                    onChange={handleChange}\n                    ref={inputRef}\n                />\n                <button className=\"todo-button edit\">更新する</button>\n                </>\n                ) : (\n                <>\n                    <input \n                    type=\"text\" \n                    placeholder=\"Add to do\" \n                    value={input} \n                    name=\"text\" \n                    className=\"todo-input\"\n                    onChange={handleChange}\n                    ref={inputRef}\n                />\n                <button className=\"todo-button\">タスクを追加</button>\n                </>\n                )\n                }\n\n\n        </form>\n    )\n}\n\nexport default TodoForm\n","import React, {useState} from 'react'\nimport TodoForm from './TodoForm'\nimport { RiCloseCircleLine } from 'react-icons/ri'\nimport { TiEdit } from 'react-icons/ti'\n\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\n    const [edit, setEdit] = useState({\n        id: null,\n        value: '',\n    });\n\n    const submitUpdate = value => {\n        updateTodo(edit.id, value);\n        setEdit({\n            id: null,\n            value: '',\n        })\n    }\n\n    if(edit.id) {\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />;\n    }\n\n    return todos.map((todo, index) => (\n        <div \n            className={todo.isComplete ? 'todo-row complete' : 'todo-row'} \n            key={index}\n        >\n            <div key={todo.id} onClick={() => completeTodo(todo.id)}>\n                {todo.text}\n            </div>\n            <div className=\"icons\">\n                <RiCloseCircleLine \n                 onClick={() => removeTodo(todo.id)}\n                 className=\"delete-icon\"\n                />\n                <TiEdit \n                    onClick={() => setEdit({ id: todo.id, value: todo.text})}\n                    className=\"edit-icon\"\n                />\n            </div>\n    </div>\n    ))\n}\n\nexport default Todo\n","import React, {useState} from 'react'\nimport TodoForm from './TodoForm'\nimport Todo from './Todo';\n\nfunction TodoList() {\n    const [todos, setTodos] = useState([]);\n\n    const addTodo = todo => {\n        if (!todo.text || /^\\s*$/.test(todo.text)){\n            return;\n        }\n\n        const newTodos = [todo, ...todos];\n\n        setTodos(newTodos);\n    };\n\n    const updateTodo = (todoId, newValue) => {\n        if (!newValue.text || /^\\s*$/.test(newValue.text)){\n            return;\n        };\n\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\n    };\n\n    const removeTodo = id => {\n        const removeArr = [...todos].filter(todo => todo.id !== id)\n\n        setTodos(removeArr);\n    };\n\n    const completeTodo = id => {\n        let updatedTodos = todos.map(todo => {\n            if (todo.id === id) {\n                todo.isComplete = !todo.isComplete\n            }\n            return todo\n        })\n        setTodos(updatedTodos);\n    }\n\n    return (\n        <div>\n            <h1>今日のタスク✍️</h1>\n            <TodoForm onSubmit={addTodo} />\n            <Todo \n                todos={todos}\n                completeTodo={completeTodo}\n                removeTodo={removeTodo}\n                updateTodo={updateTodo}\n            />\n        </div>\n    )\n}\n\nexport default TodoList\n","import React from 'react';\nimport TodoForm from './components/TodoForm';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}